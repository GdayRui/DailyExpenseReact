{"version":3,"sources":["components/Form.jsx","components/Table.jsx","App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmitForm","state","newRecord","Amount","setState","isError","r","Category","document","getElementById","value","onAddNewRecord","onShowMainPage","handleInputChange","e","target","id","Date","Description","Comment","Id","isSelected","category","alertDiv","this","className","role","type","onChange","placeholder","onClick","Component","Table","handleShowForm","isMainPage","handleShowMainPage","handleSelected","numSelectedRecords","i","data","length","tmpData","dataFiltered","tmpDataFiltered","handleDelete","resultList","filter","item","window","localStorage","setItem","storageKey","JSON","stringify","handleAddNewRecord","currentData","push","handleSort","sortedData","sort","a","b","ascending","itemA","toUpperCase","itemB","comparison","commentA","commentB","categoryA","categoryB","dateA","dateB","sortingColumn","console","log","handleQuickSearch","userInput","filteredResult","indexOf","readLocalStorage","storedDataJson","getItem","storedData","parse","tbodyFilteredData","map","icon","faCheckCircle","mainPage","title","faCaretUp","readOnly","disabled","App","tableTitle","React","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5f400f2e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newRecord: {\n        Id: 0,\n        Date: \"\",\n        Description: \"\",\n        Amount: \"\",\n        Category: \"\",\n        Comment: \"\",\n        isSelected: false\n      },\n      category: [\"Grocery\", \"Petrol\", \"Education\", \"Insurance\", \"Others\"],\n      isError: false\n    };\n  }\n\n  onSubmitForm = () => {\n    // // option 1: get value of new record\n    // let currentRecord = {\n    //   Date: document.getElementById(\"date\").value,\n    //   Description: document.getElementById(\"item-name\").value,\n    //   Amount: document.getElementById(\"amount\").value,\n    //   Category: document.getElementById(\"category\").value,\n    //   Comment: document.getElementById(\"comments\").value\n    // };\n    // // option 1: then inform <table>\n    // this.props.onAddNewRecord(currentRecord);\n    // this.props.onShowMainPage();\n\n    // option 2:\n    if (this.state.newRecord.Amount === \"\") {\n      this.setState({ isError: true });\n    } else {\n      let r = this.state.newRecord;\n      r.Category = document.getElementById(\"category\").value;\n      this.setState({ newRecord: r });\n      this.props.onAddNewRecord(this.state.newRecord);\n      this.props.onShowMainPage();\n    }\n  };\n\n  // option 2: get value of new record using onChange fn\n  handleInputChange = e => {\n    let newRecord = this.state.newRecord;\n    if (e.target.id === \"date\") {\n      newRecord.Date = e.target.value;\n    } else if (e.target.id === \"category\") {\n      newRecord.Category = e.target.value;\n    } else if (e.target.id === \"item-name\") {\n      newRecord.Description = e.target.value;\n    } else if (e.target.id === \"amount\") {\n      newRecord.Amount = e.target.value;\n    } else if (e.target.id === \"comments\") {\n      newRecord.Comment = e.target.value;\n    }\n\n    this.setState({ newRecord: newRecord });\n  };\n\n  render() {\n    // Alert will display when submit with input empty\n    const alertDiv = this.state.isError ? (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        Please fill in the blanks before you submit!\n      </div>\n    ) : (\n      <div></div>\n    );\n\n    return (\n      <div className=\"container\">\n        <form>\n          <div className=\"form-group\">\n            <input\n              id=\"date\"\n              className=\"form-control\"\n              type=\"date\"\n              value={this.state.newRecord.Date} // option 1: remove this line, otherwise the date will always be  ''\n              onChange={this.handleInputChange}\n            />\n          </div>\n          <div className=\"form-group\">\n            <select\n              id=\"category\"\n              className=\"form-control\"\n              value={this.state.newRecord.Category} // option 1: remove this line\n              onChange={this.handleInputChange}\n            >\n              <option value=\"Grocery\">Grocery</option>\n              <option>Petrol</option>\n              <option>Education</option>\n              <option>Insurance</option>\n              <option>Others</option>\n            </select>\n          </div>\n          <div className=\"form-group\">\n            <input\n              id=\"item-name\"\n              className=\"form-control\"\n              type=\"text\"\n              placeholder=\"Item Name\"\n              onChange={this.handleInputChange}\n            />\n          </div>\n          <div className=\"form-group\">\n            <input\n              id=\"amount\"\n              className=\"form-control\"\n              type=\"number\"\n              placeholder=\"Amount\"\n              onChange={this.handleInputChange}\n            />\n          </div>\n          <div className=\"form-group\">\n            <input\n              id=\"comments\"\n              className=\"form-control\"\n              type=\"text\"\n              placeholder=\"Comments\"\n              onChange={this.handleInputChange}\n            />\n          </div>\n          {/* Alert when submit without input */}\n          {alertDiv}\n          <input\n            className=\"btn btn-success\"\n            type=\"button\"\n            value=\"Submit\"\n            onClick={this.onSubmitForm}\n          ></input>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","import React, { Component } from \"react\";\nimport Form from \"./Form\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheckCircle, faCaretUp } from \"@fortawesome/free-solid-svg-icons\";\n\nclass Table extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ascending: true,\n      isMainPage: true,\n      data: [],\n      dataFiltered: [],\n      storageKey: \"expenseList\",\n      numSelectedRecords: 0,\n      sortingColumn: \"\"\n    };\n  }\n\n  handleShowForm = () => {\n    this.setState({ isMainPage: false });\n  };\n\n  handleShowMainPage = () => {\n    this.setState({ isMainPage: true });\n  };\n\n  handleSelected = id => {\n    let numSelectedRecords = this.state.numSelectedRecords;\n\n    for (let i = 0; i < this.state.data.length; i++) {\n      if (id === this.state.data[i].Id) {\n        let tmpData = this.state.data;\n\n        tmpData[i].isSelected = !tmpData[i].isSelected;\n        tmpData[i].isSelected ? numSelectedRecords++ : numSelectedRecords--;\n\n        this.setState({\n          numSelectedRecords: numSelectedRecords,\n          data: tmpData\n        });\n        return;\n      }\n    }\n\n    for (let i = 0; i < this.state.dataFiltered.length; i++) {\n      if (id === this.state.dataFiltered[i].Id) {\n        let tmpDataFiltered = this.state.dataFiltered;\n        tmpDataFiltered[i].isSelected = !tmpDataFiltered[i].isSelected;\n        tmpDataFiltered[i].isSelected\n          ? numSelectedRecords++\n          : numSelectedRecords--;\n        this.setState({\n          numSelectedRecords: numSelectedRecords,\n          dataFiltered: tmpDataFiltered\n        });\n        return;\n      }\n    }\n  };\n\n  // Delete selected records\n  handleDelete = () => {\n    let resultList = this.state.data.filter(item => !item.isSelected);\n    this.setState({\n      data: resultList,\n      dataFiltered: resultList,\n      numSelectedRecords: 0\n    });\n    // **\n    window.localStorage.setItem(\n      this.state.storageKey,\n      JSON.stringify(resultList)\n    );\n  };\n\n  // ***\n  handleAddNewRecord = newRecord => {\n    newRecord.Id = this.state.data.length + 1;\n    let currentData = this.state.data;\n    currentData.push(newRecord);\n\n    window.localStorage.setItem(\n      this.state.storageKey,\n      JSON.stringify(currentData)\n    );\n\n    this.setState({\n      data: currentData,\n      dataFiltered: currentData,\n      numSelectedRecords: 0\n    });\n  };\n\n  // Sort the data\n  handleSort = type => {\n    const compareItem = (a, b) => {\n      const itemA = a.Description.toUpperCase();\n      const itemB = b.Description.toUpperCase();\n      // ** cannot compare 2 strings. this compare fn only return 0, 1, -1.\n      // return itemA>itemB?1:-1;\n      let comparison = 0;\n      if (itemA > itemB) {\n        this.state.ascending ? (comparison = 1) : (comparison = -1);\n      } else if (itemA < itemB) {\n        this.state.ascending ? (comparison = -1) : (comparison = 1);\n      }\n      return comparison;\n    };\n\n    const compareAmount = (a, b) => {\n      return this.state.ascending ? a.Amount - b.Amount : b.Amount - a.Amount;\n    };\n\n    const compareComment = (a, b) => {\n      const commentA = a.Comment.toUpperCase();\n      const commentB = b.Comment.toUpperCase();\n      let comparison = 0;\n      if (commentA > commentB) {\n        this.state.ascending ? (comparison = 1) : (comparison = -1);\n      } else if (commentA < commentB) {\n        this.state.ascending ? (comparison = -1) : (comparison = 1);\n      }\n      return comparison;\n    };\n\n    const compareCategory = (a, b) => {\n      const categoryA = a.Category.toUpperCase();\n      const categoryB = b.Category.toUpperCase();\n      let comparison = 0;\n      if (categoryA > categoryB) {\n        this.state.ascending ? (comparison = 1) : (comparison = -1);\n      } else if (categoryA < categoryB) {\n        this.state.ascending ? (comparison = -1) : (comparison = 1);\n      }\n      return comparison;\n    };\n\n    const compareDate = (a, b) => {\n      const dateA = new Date(a.Date);\n      const dateB = new Date(b.Date);\n      let comparison = 0;\n      if (dateA > dateB) {\n        this.state.ascending ? (comparison = 1) : (comparison = -1);\n      } else if (dateA < dateB) {\n        this.state.ascending ? (comparison = -1) : (comparison = 1);\n      }\n      return comparison;\n    };\n\n    let sortedData;\n    // if (type === \"Amount\") {\n    //   sortedData = this.state.data.sort(compareAmount);\n    // } else if (type === \"Item\") {\n    //   sortedData = this.state.data.sort(compareItem);\n    // } else if (type === \"Comment\") {\n    //   sortedData = this.state.data.sort(compareComment);\n    // } else if (type === \"Category\") {\n    //   sortedData = this.state.data.sort(compareCategory);\n    // } else if (type === \"Date\") {\n    //   sortedData = this.state.data.sort(compareDate);\n    // }\n\n    switch (type) {\n      case \"Amount\":\n        sortedData = this.state.data.sort(compareAmount);\n        break;\n      case \"Item\":\n        sortedData = this.state.data.sort(compareItem);\n        break;\n      case \"Comment\":\n        sortedData = this.state.data.sort(compareComment);\n        break;\n      case \"Category\":\n        sortedData = this.state.data.sort(compareCategory);\n        break;\n      case \"Date\":\n        sortedData = this.state.data.sort(compareDate);\n        break;\n      default:\n        break;\n    }\n    this.state.ascending = !this.state.ascending;\n\n    this.setState({\n      data: sortedData,\n      sortingColumn: type,\n      ascending: this.state.ascending\n    });\n    debugger;\n    console.log(\"Sorted\");\n  };\n\n  // Quick search\n  handleQuickSearch = e => {\n    debugger;\n    var userInput = e.target.value.toUpperCase();\n    const filterFn = item =>\n      item.Description.toUpperCase().indexOf(userInput) >= 0 ||\n      item.Amount.indexOf(userInput) >= 0 ||\n      item.Description.toUpperCase().indexOf(userInput) >= 0 ||\n      item.Category.toUpperCase().indexOf(userInput) >= 0;\n\n    let filteredResult = this.state.data.filter(filterFn);\n\n    this.setState({ dataFiltered: filteredResult });\n  };\n\n  // Read local storage data when loading the page.\n  readLocalStorage = () => {\n    let storedDataJson = window.localStorage.getItem(this.state.storageKey);\n\n    let storedData = JSON.parse(storedDataJson);\n    if (storedData) {\n      this.setState({ data: storedData, dataFiltered: storedData });\n    }\n  };\n\n  // After render\n  componentDidMount() {\n    this.readLocalStorage();\n  }\n\n  render() {\n    // Filtered data. Always use 'filteredData' as Tbody, but assign it 'data' whenever 'data' change.\n    let tbodyFilteredData = this.state.dataFiltered.map(item => {\n      return (\n        <tr onClick={() => this.handleSelected(item.Id)}>\n          <td>{item.Date}</td>\n          <td>{item.Description}</td>\n          <td>{item.Amount}</td>\n          <td>{item.Category}</td>\n          <td>{item.Comment}</td>\n          {item.isSelected ? (\n            <td>\n              <FontAwesomeIcon icon={faCheckCircle} />\n            </td>\n          ) : (\n            <td></td>\n          )}\n        </tr>\n      );\n    });\n\n    let mainPage = (\n      <div className=\"container\">\n        <div className=\"container my-5\">\n          <h2>{this.props.title}</h2>\n        </div>\n        <input type=\"text\" onChange={this.handleQuickSearch} />\n        <table className=\"table table-striped my-2\">\n          <thead>\n            <tr>\n              <th onClick={() => this.handleSort(\"Date\")}>\n                Date{\" \"}\n                {this.state.sortingColumn === \"Date\" &&\n                  (this.state.ascending ? (\n                    <FontAwesomeIcon icon={faCaretUp} />\n                  ) : (\n                    <FontAwesomeIcon className=\"faCaretDown\" icon={faCaretUp} />\n                  ))}\n              </th>\n              <th onClick={() => this.handleSort(\"Item\")}>\n                Item{\" \"}\n                {this.state.sortingColumn === \"Item\" &&\n                  (this.state.ascending ? (\n                    <FontAwesomeIcon icon={faCaretUp} />\n                  ) : (\n                    <FontAwesomeIcon className=\"faCaretDown\" icon={faCaretUp} />\n                  ))}\n              </th>\n              <th onClick={() => this.handleSort(\"Amount\")}>\n                Amount{\" \"}\n                {this.state.sortingColumn === \"Amount\" &&\n                  (this.state.ascending ? (\n                    <FontAwesomeIcon icon={faCaretUp} />\n                  ) : (\n                    <FontAwesomeIcon className=\"faCaretDown\" icon={faCaretUp} />\n                  ))}\n              </th>\n              <th onClick={() => this.handleSort(\"Category\")}>\n                Category{\" \"}\n                {this.state.sortingColumn === \"Category\" &&\n                  (this.state.ascending ? (\n                    <FontAwesomeIcon icon={faCaretUp} />\n                  ) : (\n                    <FontAwesomeIcon className=\"faCaretDown\" icon={faCaretUp} />\n                  ))}\n              </th>\n              <th onClick={() => this.handleSort(\"Comment\")}>\n                Comment{\" \"}\n                {this.state.sortingColumn === \"Comment\" &&\n                  (this.state.ascending ? (\n                    <FontAwesomeIcon icon={faCaretUp} />\n                  ) : (\n                    <FontAwesomeIcon className=\"faCaretDown\" icon={faCaretUp} />\n                  ))}\n              </th>\n              <th className=\"Table-th\"></th>\n            </tr>\n          </thead>\n          <tbody>{tbodyFilteredData}</tbody>\n        </table>\n\n        <input\n          className=\"btn btn-primary pr-5 pl-5 mt-3 mx-2\"\n          onClick={this.handleShowForm}\n          value=\"Add Expense\"\n          readOnly\n        />\n        <input\n          className=\"btn btn-danger pr-5 pl-5 mt-3 mx-2\"\n          onClick={this.handleDelete}\n          // ES6 string\n          value={`Delete ${this.state.numSelectedRecords} Records`}\n          disabled={this.state.numSelectedRecords === 0}\n        />\n      </div>\n    );\n\n    if (this.state.isMainPage) {\n      return mainPage;\n    } else {\n      return (\n        <Form\n          onShowMainPage={this.handleShowMainPage}\n          onAddNewRecord={this.handleAddNewRecord}\n        />\n      );\n    }\n  }\n}\n\nexport default Table;\n","import React from \"react\";\nimport Table from \"./components/Table\";\n\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    isMainPage: true,\n    tableTitle: \"Daily Expense 2020 Jan\"\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Table title={this.state.tableTitle} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}